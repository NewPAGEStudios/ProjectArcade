//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MBC/ActionMaps/playerActionMaps.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionMaps: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionMaps()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerActionMaps"",
    ""maps"": [
        {
            ""name"": ""playerMap"",
            ""id"": ""5cfda158-f252-4778-86e2-0675d8d33db9"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""99c85798-d751-49f2-946a-a050649c3e22"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dcee7187-227d-445c-a6ec-1ee92decf5bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""4630685e-7044-4cbf-abf7-c43c91db52a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""Button"",
                    ""id"": ""c6a2d87a-164d-4a9c-ad84-3f39a7db6484"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""24446f61-0a52-4358-8950-af33d04ddc03"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""313e6434-0a01-435c-9068-55d61628ad97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3ca71249-4fb2-42d2-ae8f-d3d60cf0f054"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0910625b-99c5-4dc3-b413-23863db7a460"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""91fe5ae2-2d36-431c-9851-ca9ab74a2f0a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c8f5d493-c44a-4c75-b5a7-2b5b7675a692"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""677e875a-1c81-4b11-b442-1648cd68c42b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e78ebe95-3008-452c-a79b-2857d9a5189d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b188f9c9-9f75-429b-ad93-c3927d07cbb3"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""721fc108-7688-4aeb-b6c4-d50aa16d71ef"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fc5be35-b62a-46ab-9cc8-b5faecebc6d7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9995c658-4517-4895-a7fb-7d01509547d7"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""handMap"",
            ""id"": ""c6fe7e3b-a0ab-4766-bb18-3ec28d8b46c7"",
            ""actions"": [
                {
                    ""name"": ""WeaponReload"",
                    ""type"": ""Button"",
                    ""id"": ""695ab68f-0ef5-4e29-8cbe-32e01a73797a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireSemi"",
                    ""type"": ""Button"",
                    ""id"": ""4c0d7d29-526b-49b6-b6a1-aa59f25f676c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireAuto"",
                    ""type"": ""Button"",
                    ""id"": ""1fdaa9f3-856d-4928-b355-f370b5584013"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Button"",
                    ""id"": ""0a7ee08c-4179-4730-a69e-44af0c503b01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a95fa133-3824-4e0a-8195-844f665372d5"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponReload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dbee2f5-32a1-4515-ab6c-4f0621549d07"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireSemi"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4568ae43-5351-41e1-aa02-1967fa6c3810"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""FireAuto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d394493c-58fd-476e-903e-16c130985d05"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""da705771-f381-4019-8c17-acbe0181bef5"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4c8838ce-2f83-4b26-b49d-c3887b956562"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // playerMap
        m_playerMap = asset.FindActionMap("playerMap", throwIfNotFound: true);
        m_playerMap_Movement = m_playerMap.FindAction("Movement", throwIfNotFound: true);
        m_playerMap_Jump = m_playerMap.FindAction("Jump", throwIfNotFound: true);
        m_playerMap_Crouch = m_playerMap.FindAction("Crouch", throwIfNotFound: true);
        m_playerMap_Slide = m_playerMap.FindAction("Slide", throwIfNotFound: true);
        m_playerMap_Look = m_playerMap.FindAction("Look", throwIfNotFound: true);
        m_playerMap_Dash = m_playerMap.FindAction("Dash", throwIfNotFound: true);
        // handMap
        m_handMap = asset.FindActionMap("handMap", throwIfNotFound: true);
        m_handMap_WeaponReload = m_handMap.FindAction("WeaponReload", throwIfNotFound: true);
        m_handMap_FireSemi = m_handMap.FindAction("FireSemi", throwIfNotFound: true);
        m_handMap_FireAuto = m_handMap.FindAction("FireAuto", throwIfNotFound: true);
        m_handMap_Scroll = m_handMap.FindAction("Scroll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // playerMap
    private readonly InputActionMap m_playerMap;
    private List<IPlayerMapActions> m_PlayerMapActionsCallbackInterfaces = new List<IPlayerMapActions>();
    private readonly InputAction m_playerMap_Movement;
    private readonly InputAction m_playerMap_Jump;
    private readonly InputAction m_playerMap_Crouch;
    private readonly InputAction m_playerMap_Slide;
    private readonly InputAction m_playerMap_Look;
    private readonly InputAction m_playerMap_Dash;
    public struct PlayerMapActions
    {
        private @PlayerActionMaps m_Wrapper;
        public PlayerMapActions(@PlayerActionMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_playerMap_Movement;
        public InputAction @Jump => m_Wrapper.m_playerMap_Jump;
        public InputAction @Crouch => m_Wrapper.m_playerMap_Crouch;
        public InputAction @Slide => m_Wrapper.m_playerMap_Slide;
        public InputAction @Look => m_Wrapper.m_playerMap_Look;
        public InputAction @Dash => m_Wrapper.m_playerMap_Dash;
        public InputActionMap Get() { return m_Wrapper.m_playerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Slide.started += instance.OnSlide;
            @Slide.performed += instance.OnSlide;
            @Slide.canceled += instance.OnSlide;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IPlayerMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Slide.started -= instance.OnSlide;
            @Slide.performed -= instance.OnSlide;
            @Slide.canceled -= instance.OnSlide;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMapActions @playerMap => new PlayerMapActions(this);

    // handMap
    private readonly InputActionMap m_handMap;
    private List<IHandMapActions> m_HandMapActionsCallbackInterfaces = new List<IHandMapActions>();
    private readonly InputAction m_handMap_WeaponReload;
    private readonly InputAction m_handMap_FireSemi;
    private readonly InputAction m_handMap_FireAuto;
    private readonly InputAction m_handMap_Scroll;
    public struct HandMapActions
    {
        private @PlayerActionMaps m_Wrapper;
        public HandMapActions(@PlayerActionMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @WeaponReload => m_Wrapper.m_handMap_WeaponReload;
        public InputAction @FireSemi => m_Wrapper.m_handMap_FireSemi;
        public InputAction @FireAuto => m_Wrapper.m_handMap_FireAuto;
        public InputAction @Scroll => m_Wrapper.m_handMap_Scroll;
        public InputActionMap Get() { return m_Wrapper.m_handMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandMapActions set) { return set.Get(); }
        public void AddCallbacks(IHandMapActions instance)
        {
            if (instance == null || m_Wrapper.m_HandMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HandMapActionsCallbackInterfaces.Add(instance);
            @WeaponReload.started += instance.OnWeaponReload;
            @WeaponReload.performed += instance.OnWeaponReload;
            @WeaponReload.canceled += instance.OnWeaponReload;
            @FireSemi.started += instance.OnFireSemi;
            @FireSemi.performed += instance.OnFireSemi;
            @FireSemi.canceled += instance.OnFireSemi;
            @FireAuto.started += instance.OnFireAuto;
            @FireAuto.performed += instance.OnFireAuto;
            @FireAuto.canceled += instance.OnFireAuto;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        private void UnregisterCallbacks(IHandMapActions instance)
        {
            @WeaponReload.started -= instance.OnWeaponReload;
            @WeaponReload.performed -= instance.OnWeaponReload;
            @WeaponReload.canceled -= instance.OnWeaponReload;
            @FireSemi.started -= instance.OnFireSemi;
            @FireSemi.performed -= instance.OnFireSemi;
            @FireSemi.canceled -= instance.OnFireSemi;
            @FireAuto.started -= instance.OnFireAuto;
            @FireAuto.performed -= instance.OnFireAuto;
            @FireAuto.canceled -= instance.OnFireAuto;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        public void RemoveCallbacks(IHandMapActions instance)
        {
            if (m_Wrapper.m_HandMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHandMapActions instance)
        {
            foreach (var item in m_Wrapper.m_HandMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HandMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HandMapActions @handMap => new HandMapActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSlide(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IHandMapActions
    {
        void OnWeaponReload(InputAction.CallbackContext context);
        void OnFireSemi(InputAction.CallbackContext context);
        void OnFireAuto(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
    }
}
